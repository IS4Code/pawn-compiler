[COLOR="#FF4700"][SIZE="7"][B]Pawn Community Compiler[/B][/SIZE][/COLOR]

[URL="https://travis-ci.org/pawn-lang/compiler"][IMG]https://travis-ci.org/pawn-lang/compiler.svg?branch=master[/IMG][/URL] [URL="https://ci.appveyor.com/project/Southclaws/compiler/branch/master"][IMG]https://ci.appveyor.com/api/projects/status/k112tbr1afrkif0n?svg=true[/IMG][/URL]

[COLOR="RoyalBlue"][SIZE="6"][B]What[/B][/SIZE][/COLOR]

This is a modified version of the Pawn 3.2.3664 compiler with many bug fixes and enhancements.

This project was originally founded by Zeex but on 2017-12-31, the project was taken over by some members of the SA:MP community. Zeex still contributes to the project, along with the [URL="https://github.com/orgs/pawn-lang/teams/compiler"]Compiler Team[/URL].

The original readme is available [URL="https://github.com/pawn-lang/tree/master/readme_compuphase.txt"]here[/URL]

[COLOR="RoyalBlue"][SIZE="6"][B]Why[/B][/SIZE][/COLOR]

This project exists to:

[LIST]
[*]Fix known bugs with the original compiler
[*]Provide a better development experience for the SA:MP community
[/LIST]

If you find problem, you can [URL="https://github.com/pawn-lang/compiler/issues"]open an issue[/URL] and contributors can work on a fix. This isn’t true of the original compiler that comes with the SA:MP server distribution.

There are also new features that enhance the development experience, such as telling you which tags are involved in a “tag mismatch” or showing you where that pesky “symbol is never used” is actually declared.

There are plenty of features and fixes that are documented, see below for links:

[COLOR="RoyalBlue"][SIZE="6"][B]List of changes[/B][/SIZE][/COLOR]

[LIST]
[*][URL="https://github.com/pawn-lang/compiler/wiki/Known-compiler-bugs"]Known compiler bugs[/URL] contains a list of bugs that the team are aware of
with their status.

[*][URL="https://github.com/pawn-lang/compiler/wiki/What's-new"]What’s new[/URL] contains features and other notable changes.

[*][URL="https://github.com/pawn-lang/compiler/releases"]Release notes[/URL] list of all official releases of the compiler
binaries.
[/LIST]

[COLOR="RoyalBlue"][SIZE="6"][B]How to Use[/B][/SIZE][/COLOR]

Binary packages can be downloaded from [URL="https://github.com/pawn-lang/compiler/releases"]Releases[/URL].

You can also get the latest development binaries for Windows on [URL="https://ci.appveyor.com/project/Southclaws/compiler/branch/master/artifacts"]AppVeyor[/URL]. This archive is built automatically on every Git commit and can be pretty unstable, so use at your own risk.

[COLOR="DeepSkyBlue"][SIZE="5"][B]Windows[/B][/SIZE][/COLOR]

If you just use an editor configured to run [FONT="courier new"]pawncc[/FONT] such as Pawno, Sublime Text or VS Code you can simply delete your existing [FONT="courier new"]pawncc.exe[/FONT] and replace it with the new one.

Download the ZIP archive and extract [FONT="courier new"]pawnc.dll[/FONT], [FONT="courier new"]pawncc.exe[/FONT], [FONT="courier new"]pawndisasmsm.exe[/FONT] to your original [FONT="courier new"]pawncc[/FONT] directory. If you use Pawno, this will be in the [FONT="courier new"]pawno/[/FONT] folder that’s inside your server directory.

[COLOR="DeepSkyBlue"][SIZE="5"][B]openSUSE/SLES[/B][/SIZE][/COLOR]

There is an installation package available for openSUSE/SLES users so that you can easily install the compiler on your distribution. Please follow these steps:

[LIST=1]
[*]Go to [URL="https://build.opensuse.org/package/show/home:mschnitzer/pawncc"]https://build.opensuse.org/package/show/home:mschnitzer/pawncc[/URL]
[*]On the right side, select your distribution (only if it’s not disabled!)
[*]Click “Go to download repository”
[*]Copy the link and enter in sudo mode in your shell:
[FONT="courier new"]zypper ar $COPIED_LINK home:mschnitzer[/FONT]
[*]Again as root, type: [FONT="courier new"]zypper ref[/FONT]
[*]Install the package with [FONT="courier new"]zypper in pawncc[/FONT]
[*]Run [FONT="courier new"]pawncc[/FONT] in your shell to test if it’s working
[/LIST]

[COLOR="DeepSkyBlue"][SIZE="5"][B]With sampctl[/B][/SIZE][/COLOR]

If you are a sampctl user, simply set the [FONT="courier new"]version[/FONT] field in [FONT="courier new"]build[/FONT]/[FONT="courier new"]builds[/FONT]:

[PHP]
{
  "builds": [
    {
      "name": "production",
      "version": "3.10.8"
    }
  ]
}
[/PHP]

[COLOR="RoyalBlue"][SIZE="6"][B]Building from source code[/B][/SIZE][/COLOR]

In general you will need [URL="https://cmake.org/"]CMake[/URL] and a C compiller to build Pawn from source code.

[COLOR="DeepSkyBlue"][SIZE="5"][B]Building on Windows[/B][/SIZE][/COLOR]

If you have VS 2017 or later:

[LIST]
[*]Clone this repo: [FONT="courier new"]git clone https://github.com/Zeex/pawn.git[/FONT]
[*]In VS 2017: File > Open > CMake > Select the [FONT="courier new"]CMakeLists.txt[/FONT] file in the root
of the compiler repository.
[/LIST]

Otherwise:

[LIST]
[*]Install [URL="https://www.visualstudio.com/vs/community/"]Visual Studio Community[/URL]

[*]Clone this repo: [FONT="courier new"]git clone https://github.com/Zeex/pawn.git[/FONT]

[*]Install [URL="https://cmake.org/"]CMake[/URL]. When installing make sure to check “Add
CMake to system PATH” to make your life easier.

[*]Generate a Visual Studio project. In Command promprt or Powershell execute the
following:
[/LIST]

[CODE]
  cd C:\Pawn
  mkdir build && cd build
  cmake ..\source\compiler -G "Visual Studio 15 2017"
[/CODE]

[LIST]
[*]From the same directory as in the previous step run:
[/LIST]

[CODE]
  cmake --build . --config Release
[/CODE]

or open the pawnc.sln in Visual Studio and build from there (but make sure to   choose the “Release” configuration).

This will create [FONT="courier new"]pawnc.dll[/FONT] and [FONT="courier new"]pawncc.exe[/FONT] in the [FONT="courier new"]Release[/FONT] folder. You can   now copy these files to your [FONT="courier new"]pawno[/FONT] folder for convenience or put them in a   separate folder and configure your code editor accordingly.

[COLOR="DeepSkyBlue"][SIZE="5"][B]Building on Linux[/B][/SIZE][/COLOR]

Use your distribution’s package manager to install the required dependencies. For example, in Ubuntu you would do:

[CODE]
sudo apt install gcc gcc-multilib make cmake
[/CODE]

[FONT="courier new"]gcc-multilib[/FONT] is needed for compiling a 32-bit binary (64-bit is not supported).

Now you can clone this repo and build the compiler:

[CODE]
git clone https://github.com/Zeex/pawn.git ~/pawn
cd ~/pawn
mkdir build && cd build
cmake ../source/compiler -DCMAKE_C_FLAGS=-m32 -DCMAKE_BUILD_TYPE=Release
make
[/CODE]

Replace “Release” with “Debug” if you want to build a debug executable for development or submitting bugs.

[COLOR="DeepSkyBlue"][SIZE="5"][B]Building on macOS[/B][/SIZE][/COLOR]

[LIST]
[*]Install Xcode: [URL="https://developer.apple.com/xcode/"]https://developer.apple.com/xcode/[/URL]

[*]Install Command Line Tools for Xcode:
[/LIST]

[CODE]
xcode-select --install
[/CODE]

[LIST]
[*]Install CMake:
[/LIST]

[CODE]
brew install cmake
[/CODE]

[LIST]
[*]Now you can clone this repo and build the compiler:
[/LIST]

[CODE]
git clone https://github.com/Zeex/pawn.git ~/pawn
cd ~/pawn
mkdir build && cd build
cmake ../source/compiler -DCMAKE_C_FLAGS=-m32 -DCMAKE_BUILD_TYPE=Release
make
[/CODE]

[COLOR="RoyalBlue"][SIZE="6"][B]Background[/B][/SIZE][/COLOR]

The project was originally started as a set of patches aimed to create a compiler that would be compatible with the compiler used in [URL="http://sa-mp.com/"]SA-MP (San Andreas Multiplayer)[/URL].

SA-MP uses a modified version of Pawn 3.2.3664 [1] with Windows-only executables, and the developers said that they lost the source code for it which means it can’t be ported to other platforms (e.g. Linux) and newly discovered bugs can’t be fixed. So the main goal of the project is to re-create changes that were previously made by the devs as well as fix all known compiler bugs.

[1] It’s worth noting that the version of the AMX embedded into the SA-MP server seems to be based on an older release of Pawn.

